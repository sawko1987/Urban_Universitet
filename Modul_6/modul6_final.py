import math

# Реализовать классы Figure(родительский), Circle, Triangle и Cube, объекты которых будут обладать методами изменения размеров, цвета и т.д.

# Атрибуты класса Figure: sides_count = 0
# Каждый объект класса Figure должен обладать следующими атрибутами:
# Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
# Атрибуты(публичные): filled(закрашенный, bool)
class Figure:
    sides_count = 0
    def __init__(self,__sides, __color, filled=True):
        self.__sides = int(__sides)
        self.__color = __color
        self.filled = filled


# Метод get_color, возвращает список RGB цветов.
    def get_color(self):
        return self.__color

# Метод __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность переданных значений перед установкой  нового цвета.
# Корректным цвет: все значения r, g и b - целые числа в диапазоне от 0 до 255 (включительно).
    def __is_valid_color(self,r, g, b):
       if type(r) in int and type(g) in int and type(b) in int:
            self.r = r
            self.g = g
            self.b = b
    

# Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения,
#  предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
    
    def set_color(self,r, g, b):




# Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если все стороны целые положительные числа
#  и кол-во новых сторон совпадает с текущим, False - во всех остальных случаях.
    def __is_valid_sides (self, *__sides):
        pass

# Метод get_sides должен возвращать значение я атрибута __sides.
    def _get_sides(self):
        return self.__sides

# Метод __len__ должен возвращать периметр фигуры.
    def __len__(self)
        pass

# Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count, то не изменять, в противном случае - менять.
    def set_sides(self,__sides):
        pass

# Атрибуты класса Circle: sides_count = 1
# Каждый объект класса Circle должен обладать следующими атрибутами и методами:
# Все атрибуты и методы класса Figure
# Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).

class Circle(Figure):
    sides_count =1
    __radius = None

# Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).
    def get_square(self):
        return math.pi * self.__radius**2

# Атрибуты класса Triangle: sides_count = 3
# Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
# Все атрибуты и методы класса Figure
class Triangle(Figure):
    sides_count = 3

# Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)
    def get_square(self):
        pass

# Атрибуты класса Cube: sides_count = 12
# Каждый объект класса Cube должен обладать следующими атрибутами и методами:
# Все атрибуты и методы класса Figure.
# Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
class Cube(Figure):
    sides_count = 12
    pass

# Метод get_volume, возвращает объём куба.
def get_volume(self):
        pass


#
# ВАЖНО!
#
# При создании объектов делайте проверку на количество переданных сторон, если сторон не ровно sides_count, то создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
#
# Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
#
# Пример 2: Triangle((200, 200, 100), 10, 6), т.к. сторон у треугольника 3, то его стороны будут - [1, 1, 1]
#
# Пример 3: Cube((200, 200, 100), 9), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
#
# Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]
#
